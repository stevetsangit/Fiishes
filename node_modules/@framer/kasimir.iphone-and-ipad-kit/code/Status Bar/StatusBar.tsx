import * as React from "react"
import { Frame, PropertyControls, ControlType, loadJSON } from "framer"
import Moment from 'react-moment';

type Appearance = "dark" | "light"
type Mode = "transparent" | "#4CD964" | "#007AFF" | "#FF3B30"
type Location = "none" | "background" | "locating"

interface Props {
  appearance: Appearance
  mode: Mode
  time: string
  twelveHour: boolean
  liveTime: boolean
  appLocating: string
  location: Location
  back: string
  batteryLevel: number
  carrier: string
  signalLevel: number
  wifiLevel: number
  width: number
  height: number
}

interface State {
  time: string
}

export class StatusBar extends React.Component<Partial<Props>, State> {
  static defaultProps = {
    appearance: "light",
    device: "iphone",
    mode: "transparent",
    liveTime: true,
    twelveHour: false,
    carrier: "",
    appLocating: "",
    back: "",
    time: "",
    location: "none",
    signalLevel: 100,
    wifiLevel: 100,
    batteryLevel: 100,
    width: 375,
    height: 20,
  }

  static propertyControls: PropertyControls<Props> = {
    device: {
      type: ControlType.Enum,
      options: ["iphone", "ipad"],
      optionTitles: ["iPhone", "iPad"],
      title: "Device"
    },
    appearance: {
      type: ControlType.Enum,
      options: ["dark", "light"],
      optionTitles: ["Dark", "Light"],
      title: "Appearance"
    },
    mode: {
      type: ControlType.Enum,
      options: ["transparent", "#4CD964", "#007AFF", "#FF3B30"],
      optionTitles: ["None", "On a call", "App actively using your location or Personal Hotspot is on", "Recording"],
      title: "Task"
    },
    appLocating: {
      type: ControlType.String,
      placeholder: "Maps",
      title: "↳ App",
      hidden(props) {
        return props.mode !== "#007AFF"
      }
    },
    liveTime: {
      type: ControlType.Boolean,
      disabledTitle: "No",
      enabledTitle: "Yes",
      title: "Real time"
    },
    twelveHour: {
      type: ControlType.Boolean,
      disabledTitle: "24h",
      enabledTitle: "12h",
      title: "↳ Time format",
      hidden(props) {
        return props.liveTime === false
      }
    },
    time: {
      type: ControlType.String,
      placeholder: "18.00",
      title: "↳ Time",
      hidden(props) {
        return props.liveTime
      }
    },
    signalLevel: {
      type: ControlType.Number,
      min: 0,
      max: 100,
      title: "Signal",
      hidden(props) {
        return props.device !== "iphone"
      }
    },
    carrier: {
      type: ControlType.String,
      placeholder: "Framer",
      title: "↳ Carrier",
      hidden(props) {
        return props.device !== "iphone"
      }
    },
    wifiLevel: {
      type: ControlType.Number,
      min: 0,
      max: 100,
      title: "Wifi"
    },
    batteryLevel: {
      type: ControlType.Number,
      min: 0,
      max: 100,
      title: "Battery"
    }
  }

  timer: number
  taskTimer: number

  state = {
    time: "18:00",
    timer: 0
  }

  componentWillMount() {
    this.updateTime()


    this.timer = window.setInterval(() => {
      this.updateTime()
      this.state.timer += 1
    }, 1000)
  }

  componentWillUpdate(nextProps, nextState) {
    if (nextProps.mode !== "transparent") {
      this.state.timer = 0
    }
  }

  componentWillUnmount() {
    window.clearInterval(this.timer)
    window.clearInterval(this.taskTimer)
  }

  secondsToHms = (d) => {
    var d = Number(d);

    var h = Math.floor(d / 3600);
    var m = Math.floor(d % 3600 / 60);
    var s = Math.floor(d % 3600 % 60);

    if (h > 0) {
      return `${("0" + h).slice(-2)}:${("0" + m).slice(-2)}:${("0" + s).slice(-2)}`;
    }

    return `${("0" + m).slice(-2)}:${("0" + s).slice(-2)}`;
  }

  updateTime = () => {
    let time = ""

    if (this.props.liveTime) {
      const date = new Date()
      var hours = date.getHours()

      if (this.props.twelveHour) {
        var ampm = hours >= 12 ? 'PM' : 'AM';

        hours = hours % 12;
        hours = hours ? hours : 12;

        time = hours + ":" + ("0" + date.getMinutes()).slice(-2)

        if (this.props.device === "iphone") {
          time += ` ${ampm}`
        }
      } else {
        time = ("0" + hours).slice(-2) + "." + ("0" + date.getMinutes()).slice(-2)
      }

    } else {
      time = this.props.time
    }

    this.setState({ time })
  }

  get time {
    return (
      <div style={{
        display: "flex",
        fontWeight: "600",
        alignItems: "center"
      }}>
        <span style={{
          width: this.props.device === 'ipad' ? "36px" : "60px",
          textAlign: this.props.device === "ipad" ? "left" : "center"
        }}>
          {this.state.time !== "" ? this.state.time : "18.00"}
        </span>

        {this.props.device === "ipad" &&
          <span style={{
            marginLeft: "9px"
          }}>
            <Moment format="ddd MMM DD">{new Date()}</Moment>
          </span>
        }
      </div>
    )
  }

  get bar() {

    // iPhone
    if (this.props.device === "iphone") {
      return (
        <div
          style={{
            display: "flex",
            height: "20px",
            fontSize: "12px",
            lineHeight: "12px",
            padding: "0 6px",
            alignItems: "center",
            justifyContent: "space-between"
        }}>
          <div style={{
            display: "flex",
            justifyContent: "flex-start",
            width: "100px",
            alignItems: "center"
          }}>
            {this.signal}
            {this.wifi}
          </div>
          {this.time}
          <div style={{
            display: "flex",
            justifyContent: "flex-end",
            width: "100px",
            alignItems: "center"
          }}>
            {this.battery}
          </div>
        </div>
      )
    }

    // iPad
    return (
      <div
        style={{
          display: "flex",
          height: "20px",
          fontSize: "12px",
          lineHeight: "12px",
          padding: "0 6px",
          alignItems: "center",
          justifyContent: "space-between"
      }}>
        {this.time}
        <div style={{
          display: "flex",
          justifyContent: "flex-end",
          alignItems: "center"
        }}>
          {this.wifi}
          {this.battery}
        </div>
      </div>
    )
  }

  get wifi() {
    if (this.props.wifiLevel === 0) {
      return false
    }

    return (
      <div style={{
        display: "flex",
        justifyContent: "flex-start",
        alignItems: "center",
        margin: "0 3px"
      }}>
        <div
          dangerouslySetInnerHTML={{
            __html: wifiSVG(this.props.mode !== "transparent" ? "light" : this.props.appearance, this.props.wifiLevel)
          }}
        ></div>
      </div>
    )
  }

  get signal() {

    if (this.props.signalLevel == 0) {
      return (
        <div style={{
          display: "flex",
          justifyContent: "flex-start",
          alignItems: "center"
        }}>
          <div style={{
            height: "14px",
            fontWeight: "500",
            textAlign: "left"
          }}>No Service</div>
        </div>
      )
    }

    return (
      <div style={{
        display: "flex",
        justifyContent: "flex-start",
        alignItems: "center"
      }}>
        <div
          dangerouslySetInnerHTML={{
            __html: signalSVG(this.props.mode !== "transparent" ? "light" : this.props.appearance, this.props.signalLevel)
          }}
        ></div>
        <div style={{
          height: "14px",
          marginLeft: "3px",
          textAlign: "left"
        }}>{this.props.carrier !== "" ? this.props.carrier : "Framer"}</div>
      </div>
    )
  }

  get battery() {
    return (
      <div style={{
        display: "flex",
        justifyContent: "flex-end",
        alignItems: "center"
      }}>
        <div style={{
          height: "14px",
          marginRight: "3px",
          textAlign: "right"
        }}>{this.props.batteryLevel}%</div>
        <div
          dangerouslySetInnerHTML={{
            __html: batterySVG(this.props.mode !== "transparent" ? "light" : this.props.appearance, this.props.batteryLevel)
          }}
        ></div>
      </div>
    )
  }

  get taskBar() {
    return (
      <div
        style={{
          display: this.props.mode !== "transparent" ? "flex" : "none",
          height: "20px",
          fontSize: "13px",
          background: this.props.mode,
          padding: "0 6px",
          alignItems: "center",
          justifyContent: "center"
      }}>
        {this.props.mode === "#4CD964" &&
          <span>Touch to return to call {this.secondsToHms(this.state.timer)}</span>
        }
        {this.props.mode === "#FF3B30" &&
          <span>Recording {this.secondsToHms(this.state.timer)}</span>
        }
        {this.props.mode === "#007AFF" &&
          <span>{this.props.appLocating !== "" ? this.props.appLocating : "Maps"} is Using Your Location</span>
        }
      </div>
    )
  }

  render() {
    const { batteryLevel, signalLevel, wifiLevel, appearance, location, back, mode, width, height } = this.props

    return (
      <Frame
        width={width}
        height={height}
        background={null}
        style={{
          fontFamily: "SF-Pro-Text, system-ui, -apple-system",
          background: mode,
          color: appearance === "dark" && mode === "transparent" ? "black" : "white"
        }}
      >
        {this.bar}
        {this.taskBar}
      </Frame>
    )
  }
}

function batterySVG(appearance: Appearance, batteryLevel: number) {
  const color = appearance === "dark" ? "black" : "white"
  const batteryJuiceColor = batteryLevel <= 10 ? "red" : batteryLevel <= 20 ? "#FFCC01" : color

  return `
    <svg width="27px" height="12px" viewBox="0 0 27 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
      <g id="Symbols" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Bars-/-Status-Bar-/-iPhone-8-/-On-Light" transform="translate(-343.000000, -4.000000)">
          <g id="Right-Detail" transform="translate(296.000000, 3.000000)">
            <g id="Battery" transform="translate(11.000000, 0.000000)">
              <g id="Battery-Icon" transform="translate(36.000000, 1.000000)">
                <path stroke="${color}" d="M3.2048565,1 C2.26431807,1 1.89540921,1.07123959 1.5147423,1.27482248 C1.19446913,1.44610644 0.946106445,1.69446913 0.774822479,2.0147423 C0.571239588,2.39540921 0.5,2.76431807 0.5,3.7048565 L0.5,8.7951435 C0.5,9.73568193 0.571239588,10.1045908 0.774822479,10.4852577 C0.946106445,10.8055309 1.19446913,11.0538936 1.5147423,11.2251775 C1.89540921,11.4287604 2.26431807,11.5 3.2048565,11.5 L22.0738202,11.5 C22.8614775,11.5 23.5,10.8614775 23.5,10.0738202 L23.5,3.7048565 C23.5,2.76431807 23.4287604,2.39540921 23.2251775,2.0147423 C23.0538936,1.69446913 22.8055309,1.44610644 22.4852577,1.27482248 C22.1045908,1.07123959 21.7356819,1 20.7951435,1 L3.2048565,1 Z" id="Battery-Outline" opacity="0.47"></path>
                <path fill="${color}" d="M25,4.12802928 C25.8738943,4.43690659 26.5,5.27033588 26.5,6.25 C26.5,7.22966412 25.8738943,8.06309341 25,8.37197072 L25,4.12802928 Z" id="Battery-Connector" fill="#000000" opacity="0.58"></path>
                <rect id="Capacity" fill="${batteryJuiceColor}" fill-rule="nonzero" x="2" y="2.33333333" height="7.888888" rx="1" width="${Math.round(
                  (batteryLevel / 100) * 19 + 1
                )}"></rect>
              </g>
            </g>
          </g>
        </g>
      </g>
    </svg>`
}

function wifiSVG(appearance: Appearance, wifiLevel: number) {
  const color = appearance === "dark" ? "black" : "white"

  return `<svg width="15px" viewBox="0 0 16 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
      <g id="Symbols" fill="none" fill-rule="evenodd">
          <g id="Bars-/-Status-Bar-/-iPhone-X-/-On-Light" transform="translate(-315.000000, -17.000000)" fill="${color}" fill-rule="nonzero">
            <path d="M325.549333,26.188 C325.611087,26.127394 325.645095,26.0439919 325.643328,25.957485 C325.641561,25.8709782 325.604176,25.7890342 325.54,25.731 C324.264428,24.6521162 322.396238,24.6521162 321.120667,25.731 C321.056446,25.7889875 321.019,25.8709057 321.01717,25.957413 C321.01534,26.0439203 321.049289,26.1273487 321.111,26.188 L323.108667,28.2036667 C323.167217,28.2629057 323.247042,28.2962443 323.330333,28.2962443 C323.413624,28.2962443 323.49345,28.2629057 323.552,28.2036667 L325.549333,26.188 Z" opacity="${wifiLevel != 0 ? 1 : 0.4}"></path>
            <path d="M323.330333,23.4036667 C324.547823,23.4035921 325.721865,23.8561245 326.624333,24.6733333 C326.746397,24.7893139 326.938678,24.7867994 327.057667,24.6676667 L328.212333,23.501 C328.273141,23.439805 328.30688,23.3567887 328.306003,23.2705239 C328.305126,23.1842592 328.269706,23.101946 328.207667,23.042 C325.459468,20.4856177 321.203532,20.4856177 318.455333,23.042 C318.393256,23.1019453 318.357837,23.1842997 318.357023,23.2705923 C318.356208,23.356885 318.390065,23.4398934 318.451,23.501 L319.605333,24.6676667 C319.724322,24.7867994 319.916603,24.7893139 320.038667,24.6733333 C320.940539,23.8566645 322.113649,23.4041708 323.330333,23.4036667 Z" opacity="${wifiLevel >= 33 ? 1 : 0.4}"></path>
            <path d="M323.330333,19.608 C325.546226,19.6080971 327.677386,20.4595347 329.283333,21.9863333 C329.404265,22.1042079 329.597562,22.102721 329.716667,21.983 L330.872667,20.8163333 C330.932975,20.7556112 330.966599,20.6733595 330.966098,20.5877792 C330.965598,20.5021988 330.931014,20.420346 330.87,20.3603333 C326.654902,16.3207858 320.005098,16.3207858 315.79,20.3603333 C315.728941,20.4203015 315.694297,20.5021294 315.693734,20.5877099 C315.693171,20.6732903 315.726736,20.755567 315.787,20.8163333 L316.943333,21.983 C317.062362,22.1029017 317.255808,22.1043897 317.376667,21.9863333 C318.982819,20.4594344 321.114223,19.6079944 323.330333,19.608 Z" opacity="${wifiLevel >= 66 ? 1 : 0.4}"></path>
          </g>
      </g>
  </svg>`
}

function signalSVG(appearance: Appearance, signalLevel: number) {
  const color = appearance === "dark" ? "black" : "white"

  return `
    <svg width="17px" height="10px" viewBox="0 0 17 10" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
      <g id="Symbols" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Bars-/-Status-Bar-/-iPhone-8-/-On-Light" transform="translate(-6.000000, -5.000000)" fill="${color}">
          <g id="Left-Detail" transform="translate(6.000000, 5.000000)">
            <rect id="Bar-1" x="0" y="5.5" width="3" height="4.5" rx="0.75" opacity="${signalLevel !== 0 ? 1 : 0.4}"></rect>
            <rect id="Bar-2" x="4.5" y="4" width="3" height="6" rx="0.75" opacity="${signalLevel >= 25 ? 1 : 0.4}"></rect>
            <rect id="Bar-3" x="9" y="2" width="3" height="8" rx="0.75" opacity="${signalLevel >= 50 ? 1 : 0.4}"></rect>
            <rect id="Bar-4" x="13.5" y="0" width="3" height="10" rx="0.75" opacity="${signalLevel >= 75 ? 1 : 0.4}"></rect>
          </g>
        </g>
      </g>
    </svg>`
}
