import * as React from 'react'
import { useState, useEffect, useMemo } from 'react'
import styled from 'styled-components'
import { rgba, readableColor, mix, parseToRgb } from 'polished'
import {
	Color,
	addPropertyControls,
	ControlType,
	RenderTarget,
	Frame,
} from 'framer'
import 'react-modern-calendar-datepicker/lib/DatePicker.css'
import DatePicker, { Calendar } from 'react-modern-calendar-datepicker'
import * as chrono from 'chrono-node'

const types = {
	single: { title: 'Single', default: null },
	multi: { title: 'Multi', default: [] },
	range: { title: 'Range', default: { from: null, to: null } },
}

const arrow = color => {
	const hexColor = Color.toHex(Color(color))
	return `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cg class='nc-icon-wrapper' fill='%23${hexColor}'%3E%3Cdefs stroke='none'%3E%3C/defs%3E%3Cpath class='cls-1' d='M12 23.25V.75' fill='none' stroke='%23${hexColor}' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5px'%3E%3C/path%3E%3Cpath class='cls-2' d='M22.5 11.25L12 .75 1.5 11.25' fill='none' stroke='%23${hexColor}' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5px' fill-rule='evenodd'%3E%3C/path%3E%3C/g%3E%3C/svg%3E")`
}

const getDateObjectFromString = string => {
	const parsedDate = chrono.parseDate(string)
	if (!parsedDate) return null
	//console.log(string, parsedDate)
	const date = new Date(parsedDate)
	return {
		day: date.getDate(),
		month: date.getMonth() + 1,
		year: date.getFullYear(),
	}
}

const flattenColor = (fg, bg) => {
	return mix(
		parseToRgb(fg)['alpha'] !== undefined
			? //
			  //@ts-ignore
			  parseToRgb(fg).alpha
			: 1,
		fg,
		bg
	)
}

const myCustomLocale = (startWeek, weekdayLetters) => {
	const w = {
		mo: {
			name: 'Monday',
			short:
				weekdayLetters === 'Mo'
					? 'Mo'
					: weekdayLetters === 'MO'
					? 'MO'
					: 'M',
		},
		tu: {
			name: 'Tuesday',
			short:
				weekdayLetters === 'Mo'
					? 'Tu'
					: weekdayLetters === 'MO'
					? 'TU'
					: 'T',
		},
		we: {
			name: 'Wednesday',
			short:
				weekdayLetters === 'Mo'
					? 'We'
					: weekdayLetters === 'MO'
					? 'WE'
					: 'W',
		},
		th: {
			name: 'Thursday',
			short:
				weekdayLetters === 'Mo'
					? 'Th'
					: weekdayLetters === 'MO'
					? 'TH'
					: 'T',
		},
		fr: {
			name: 'Friday',
			short:
				weekdayLetters === 'Mo'
					? 'Fr'
					: weekdayLetters === 'MO'
					? 'FR'
					: 'F',
		},
		sa: {
			name: 'Saturday',
			short:
				weekdayLetters === 'Mo'
					? 'Sa'
					: weekdayLetters === 'MO'
					? 'SA'
					: 'S',
			isWeekend: true,
		},
		su: {
			name: 'Sunday', // used for accessibility
			short:
				weekdayLetters === 'Mo'
					? 'Su'
					: weekdayLetters === 'MO'
					? 'SU'
					: 'S', // displayed at the top of days' rows
			isWeekend: true, // is it a formal weekend or not?
		},
	}

	return {
		// months list by order
		months: [
			'January',
			'February',
			'March',
			'April',
			'May',
			'June',
			'July',
			'August',
			'September',
			'October',
			'November',
			'December',
		],

		// week days by order
		weekDays:
			startWeek === 6
				? [w.mo, w.tu, w.we, w.th, w.fr, w.sa, w.su]
				: [w.su, w.mo, w.tu, w.we, w.th, w.fr, w.sa],

		// just play around with this number between 0 and 6
		weekStartingIndex: startWeek,

		// return a { year: number, month: number, day: number } object
		getToday: gregorainTodayObject => {
			return gregorainTodayObject
		},

		// return a native JavaScript date here
		toNativeDate: date => {
			return new Date(date.year, date.month - 1, date.day)
		},

		// return a number for date's month length
		getMonthLength: date => {
			return new Date(date.year, date.month, 0).getDate()
		},

		// return a transformed digit to your locale
		transformDigit: digit => {
			return digit
		},

		// texts in the date picker
		nextMonth: 'Next Month',
		previousMonth: 'Previous Month',
		openMonthSelector: 'Open Month Selector',
		openYearSelector: 'Open Year Selector',
		closeMonthSelector: 'Close Month Selector',
		closeYearSelector: 'Close Year Selector',
		defaultPlaceholder: 'Select...',

		// for input range value
		from: 'from',
		to: 'to',

		// used for input value when multi dates are selected
		digitSeparator: ',',

		// if your provide -2 for example, year will be 2 digited
		yearLetterSkip: 0,

		// is your language rtl or ltr?
		isRtl: false,
	}
}

type CustomColorsProps = {
	fontFamily: string
	backgroundColor: string
	inkOnPrimary: string
	inkOnPrimaryLight: string
	textColor: string
	textDisabledColor: string
	weekendColor: string
	backgroundColorTransparent: string
	hoverColor: string
}

const CustomColors = styled('div')<CustomColorsProps>`
	font-family: ${props => props.fontFamily};

	--cl-color-background: ${props => props.backgroundColor};
	--cl-color-background-transparent: ${props =>
		props.backgroundColorTransparent};
	--cl-color-ink-on-primary: ${props => props.inkOnPrimary};
	--cl-color-ink-on-primary-light: ${props => props.inkOnPrimaryLight};
	--cl-color-hover: ${props => props.hoverColor};

	.Calendar__day.-today:not(.-selectedStart):not(.-selectedEnd):not(.-selectedBetween)::after {
		background-color: ${props => props.textColor};
	}

	.Calendar {
		--cl-color-black: ${props => props.textColor};
		--cl-color-disabled: ${props => props.textDisabledColor};
		--cl-color-error: ${props => props.weekendColor};
		--cl-color-background: button {
			color: inherit;
		}

		button {
			color: inherit;
		}

		.Calendar__day {
			color: var(--cl-color-black);
			box-sizing: border-box !important;
		}

		.Calendar__monthSelector {
			color: var(--cl-color-black);
			background-color: var(--cl-color-background);
		}

		.Calendar__monthArrow {
			background-image: ${props => arrow(props.textColor)};
		}
	}
`

type CustomStylesInnerProps = {
	selectionFill: boolean
	selectedRadius: number
	radius: string
	width: string
	height: string
	fontSize: number
	boxShadow: string
}

const CustomStylesInner = styled('div')<CustomStylesInnerProps>`
	.Calendar {
		.Calendar__yearSelector {
			color: var(--cl-color-black);
			background-color: var(--cl-color-background);
		}

		.-active .Calendar__yearSelectorText,
		.-active .Calendar__monthSelectorItemText {
			color: var(--cl-color-ink-on-primary);
			background-color: ${props =>
				props.selectionFill
					? 'var(--cl-color-primary)'
					: 'transparent'};
			border: ${props =>
				props.selectionFill
					? 'none'
					: '2px solid var(--cl-color-primary)'} !important;
		}

		.Calendar__yearSelectorWrapper::after {
			background-image: linear-gradient(
				to bottom,
				var(--cl-color-background),
				var(--cl-color-background) 10%,
				var(--cl-color-background-transparent)
			);
		}

		.Calendar__yearSelectorWrapper::before {
			background-image: linear-gradient(
				0deg,
				var(--cl-color-background),
				var(--cl-color-background) 10%,
				var(--cl-color-background-transparent)
			);
		}

		.Calendar__day:not(.-blank):not(.-selectedStart):not(.-selectedEnd):not(.-selectedBetween):not(.-selected):hover {
			background: var(--cl-color-hover) !important;
			border-radius: ${props => props.selectedRadius}em !important;
		}
	}

	.custom-today {
		color: var(--cl-color-black) !important;
	}

	.custom-calendar {
		background-color: var(--cl-color-background);
		border-radius: ${props => props.radius};
		width: ${props => props.width};
		height: ${props => props.height};
		font-size: ${props => props.fontSize}px;
		box-shadow: ${props => props.boxShadow};
	}

	.custom-selected-day {
		color: var(--cl-color-ink-on-primary) !important;
		border-radius: ${props => props.selectedRadius}em;
		background-color: ${props =>
			props.selectionFill ? 'var(--cl-color-primary)' : 'transparent'};
		border: ${props =>
			props.selectionFill
				? 'none'
				: '2px solid var(--cl-color-primary)'} !important;
	}

	.custom-range-start {
		color: var(--cl-color-ink-on-primary) !important;
		border-top-left-radius: ${props => props.selectedRadius}em !important;
		border-bottom-left-radius: ${props =>
			props.selectedRadius}em !important;
		background-color: ${props =>
			props.selectionFill ? 'var(--cl-color-primary)' : 'transparent'};
		border: ${props =>
			props.selectionFill
				? 'none'
				: '2px solid var(--cl-color-primary)'} !important;
		border-width: ${props =>
			props.selectionFill ? '0' : '2px 0 2px 2px'} !important;
	}

	.custom-range-between {
		color: var(--cl-color-ink-on-primary-light) !important;
		border-radius: 0px;
		background-color: ${props =>
			props.selectionFill
				? 'var(--cl-color-primary-light)'
				: 'transparent'};
		border: ${props =>
			props.selectionFill
				? 'none'
				: '2px solid var(--cl-color-primary)'} !important;
		border-width: ${props =>
			props.selectionFill ? '0' : '2px 0'} !important;
	}

	.custom-range-end {
		color: var(--cl-color-ink-on-primary) !important;
		border-top-left-radius: 0px !important;
		border-bottom-left-radius: 0px !important;
		border-top-right-radius: ${props => props.selectedRadius}em !important;
		border-bottom-right-radius: ${props =>
			props.selectedRadius}em !important;
		background-color: ${props =>
			props.selectionFill ? 'var(--cl-color-primary)' : 'transparent'};
		border: ${props =>
			props.selectionFill
				? 'none'
				: '2px solid var(--cl-color-primary)'} !important;
		border-width: ${props =>
			props.selectionFill ? '0' : '2px 2px 2px 0'} !important;
	}
`

export function ModernCalendar(props) {
	const {
		backgroundColor,
		textColor,
		weekendColor,
		selectionFill,
		selectionColor,
		selectionTextColorMode,
		selectionTextColor,
		rangeColor,
		fontFamily,
		fontSize,
		radius,
		radiusIsMixed,
		onTap,
		onValueChange,
		control,
		type,
		locale,
		minimumDate,
		maximumDate,
		disabledDays,
		selectedDay,
		selectedDayFrom,
		selectedDayTo,
		selectedDays,
		shouldHighlightWeekends,
		selectedRadius,
		startWeek,
		weekdayLetters,
		boxShadow,
		shadowColor,
		boxShadowCustom,
		...rest
	} = props

	if (RenderTarget.current() === RenderTarget.thumbnail) {
		return (
			<Frame
				center
				style={{
					color: 'black',
					fontSize: '18em',
					width: '90%',
					height: '90%',
					overflow: 'hidden',
					backgroundColor: '#ffffff',
					borderRadius: '.25em',
					boxShadow:
						'0 0em 0.1em 0 rgba(0, 0, 0, 0.3), 0 0.1em 0.3em 0 rgba(0, 0, 0, 0.2)',
				}}
			>
				31
			</Frame>
		)
	}

	const [selected, setSelected] = useState(
		type === 'single'
			? getDateObjectFromString(selectedDay)
				? getDateObjectFromString(selectedDay)
				: types.single.default
			: type === 'multi'
			? selectedDays.length > 0
				? selectedDays.map(_ => getDateObjectFromString(_))
				: types.multi.default
			: getDateObjectFromString(selectedDayFrom) &&
			  getDateObjectFromString(selectedDayTo)
			? {
					from: getDateObjectFromString(selectedDayFrom),
					to: getDateObjectFromString(selectedDayTo),
			  }
			: types.range.default
	)

	useEffect(() => {
		setSelected(
			type === 'single'
				? getDateObjectFromString(selectedDay)
					? getDateObjectFromString(selectedDay)
					: types.single.default
				: type === 'multi'
				? selectedDays.length > 0
					? selectedDays.map(_ => getDateObjectFromString(_))
					: types.multi.default
				: getDateObjectFromString(selectedDayFrom) &&
				  getDateObjectFromString(selectedDayTo)
				? {
						from: getDateObjectFromString(selectedDayFrom),
						to: getDateObjectFromString(selectedDayTo),
				  }
				: types.range.default
		)
	}, [
		type,
		type === 'single' ? selectedDay : null,
		type === 'range' ? selectedDayFrom : null,
		type === 'range' ? selectedDayTo : null,
		type === 'multi' ? selectedDays : null,
	])

	// const calendarProps = useMemo(() => {
	// 	return {
	// 		value: selected,
	// 		onChange: newSelection => {
	// 			setSelected(newSelection)
	// 			onValueChange(newSelection)
	// 		},
	// 		locale:
	// 			locale === 'en'
	// 				? myCustomLocale(startWeek, weekdayLetters)
	// 				: locale,
	// 		disabledDays: disabledDays.map(_ => getDateObjectFromString(_)),
	// 		minimumDate: getDateObjectFromString(minimumDate),
	// 		maximumDate: getDateObjectFromString(maximumDate),
	// 		shouldHighlightWeekends: shouldHighlightWeekends,
	// 		calendarClassName: 'custom-calendar',
	// 		calendarTodayClassName: 'custom-today',
	// 		calendarSelectedDayClassName: 'custom-selected-day',
	// 		calendarRangeStartClassName: 'custom-range-start',
	// 		calendarRangeBetweenClassName: 'custom-range-between',
	// 		calendarRangeEndClassName: 'custom-range-end',
	// 	}
	// }, [
	// 	selected,
	// 	locale,
	// 	disabledDays,
	// 	minimumDate,
	// 	maximumDate,
	// 	shouldHighlightWeekends,
	// ])

	const calendarProps = useMemo(() => {
		return {
			value: selected,
			onChange: newSelection => {
				setSelected(newSelection)
				onValueChange(newSelection)
			},
			locale:
				locale === 'en'
					? myCustomLocale(startWeek, weekdayLetters)
					: locale,
			disabledDays: disabledDays.map(_ => getDateObjectFromString(_)),
			minimumDate: getDateObjectFromString(minimumDate),
			maximumDate: getDateObjectFromString(maximumDate),
			shouldHighlightWeekends: shouldHighlightWeekends,
		}
	}, [
		selected,
		locale,
		disabledDays,
		minimumDate,
		maximumDate,
		shouldHighlightWeekends,
	])

	// const inkOnPrimary = useMemo(() => {
	// 	return selectionTextColorMode
	// 		? selectionFill
	// 			? readableColor(flattenColor(selectionColor, backgroundColor))
	// 			: 'inherit'
	// 		: selectionTextColor
	// }, [
	// 	selectionTextColorMode,
	// 	selectionFill,
	// 	selectionColor,
	// 	backgroundColor,
	// 	selectionTextColor,
	// ])

	// const inkOnPrimaryLight = useMemo(() => {
	// 	return selectionTextColorMode
	// 		? selectionFill
	// 			? readableColor(flattenColor(rangeColor, backgroundColor))
	// 			: 'inherit'
	// 		: selectionTextColor
	// }, [
	// 	selectionTextColorMode,
	// 	selectionFill,
	// 	rangeColor,
	// 	backgroundColor,
	// 	selectionTextColor,
	// ])

	const inkOnPrimary = () =>
		selectionTextColorMode
			? selectionFill
				? readableColor(flattenColor(selectionColor, backgroundColor))
				: 'inherit'
			: selectionTextColor

	const inkOnPrimaryLight = () =>
		selectionTextColorMode
			? selectionFill
				? readableColor(flattenColor(rangeColor, backgroundColor))
				: 'inherit'
			: selectionTextColor

	const boxShadowValue = useMemo(() => {
		return boxShadow === 'custom'
			? boxShadowCustom
			: boxShadow.replace(/\$/g, shadowColor)
	}, [boxShadow, boxShadowCustom, shadowColor])

	const radiusValue = useMemo(() => {
		return radiusIsMixed
			? `${rest.radiusTopLeft}px ${rest.radiusTopRight}px ${rest.radiusBottomRight}px ${rest.radiusBottomLeft}px`
			: radius + 'px'
	}, [radiusIsMixed, rest])

	return (
		<CustomColors
			fontFamily={fontFamily}
			backgroundColor={backgroundColor}
			backgroundColorTransparent={rgba(backgroundColor, 0)}
			textColor={textColor}
			textDisabledColor={rgba(textColor, 0.3)}
			weekendColor={weekendColor}
			inkOnPrimary={inkOnPrimary}
			inkOnPrimaryLight={inkOnPrimaryLight}
			hoverColor={rgba(selectionColor, 0.15)}
		>
			<CustomStylesInner
				width={control === 'picker' ? rest.width : '100%'}
				height={control === 'picker' ? rest.height : '100%'}
				fontSize={fontSize}
				radius={radiusValue}
				boxShadow={boxShadowValue}
				selectedRadius={selectedRadius}
				selectionFill={selectionFill}
			>
				{control === 'picker' ? (
					<DatePicker
						{...calendarProps}
						colorPrimary={selectionColor}
						colorPrimaryLight={rangeColor}
						calendarClassName="custom-calendar"
						calendarTodayClassName="custom-today"
						calendarSelectedDayClassName="custom-selected-day"
						calendarRangeStartClassName="custom-range-start"
						calendarRangeBetweenClassName="custom-range-between"
						calendarRangeEndClassName="custom-range-end"
					/>
				) : (
					<Calendar
						{...calendarProps}
						colorPrimary={selectionColor}
						colorPrimaryLight={rangeColor}
						calendarClassName="custom-calendar"
						calendarTodayClassName="custom-today"
						calendarSelectedDayClassName="custom-selected-day"
						calendarRangeStartClassName="custom-range-start"
						calendarRangeBetweenClassName="custom-range-between"
						calendarRangeEndClassName="custom-range-end"
					/>
				)}
			</CustomStylesInner>
		</CustomColors>
	)
}

ModernCalendar.defaultProps = {
	height: 367,
	width: 330,
	mode: 'prefs',

	/* Code only
	You can use the `onValueChange` prop to pass a function. When the Calendar is used, the function will receive one argument in one of the following formats – depending on the chosen calendar type
	single:   {day, month, year}
	multi:    [{day, month, year}, …]
	range:    {from: {day, month, year}, to: {day, month, year}}
	*/

	onValueChange: () => {},

	// ---- Prefs ----
	control: 'calendar', // ['calendar' | 'picker']
	type: 'single', // ['single' | 'multi' | 'range']
	locale: 'en', // ['en' | 'fa']

	startWeek: 6, // [6 | 0]

	/* Dates
	All these dates are strings and can have any format that is understood by chrono, e.g. '2020-04-01' or 'next friday
	*/
	minimumDate: `one week ago`, // first selectable date
	maximumDate: `in 1 year`, // last selectable date

	selectedDay: '', // selected day in 'single' mode
	selectedDays: [], // array of selected days in 'multi' mode
	selectedDayFrom: '', // first selected day in 'range' mode
	selectedDayTo: '', // last selected day in 'range' mode

	disabledDays: [], // array of days that are not selectable

	// ---- Style ----
	weekdayLetters: 'M', // ['M' | 'Mo' | 'MO']
	backgroundColor: '#ffffff',
	textColor: '#000000',

	shouldHighlightWeekends: false,
	weekendColor: '#ff2929',

	selectionFill: true, // true --> filled, false --> outline
	selectionColor: 'rgba(0,128,255,1)',
	rangeColor: 'rgba(0,128,255,.1)',
	selectionTextColorMode: true, // true --> automatic, false --> custom
	selectionTextColor: 'rgba(255,255,255,1)',
	selectedRadius: 2, // in em

	fontFamily: 'system-ui, sans-serif',
	fontSize: 10, // in px

	radius: 8,
	radiusIsMixed: false,

	boxShadow: '0 1em 4em', // presets or 'custom'
	shadowColor: 'rgba(0, 0, 0, 0.07)', // only used for presets
	boxShadowCustom: '0 1em 4em rgba(0, 0, 0, 0.07)',
}

addPropertyControls(ModernCalendar, {
	mode: {
		title: 'Edit',
		type: ControlType.Enum,
		displaySegmentedControl: true,
		options: ['prefs', 'style'],
		optionTitles: ['⚙️ Prefs', '🎨 Style'],
	},

	// PREFS ====

	control: {
		title: 'Control',
		type: ControlType.Enum,
		displaySegmentedControl: true,
		options: ['calendar', 'picker'],
		optionTitles: ['Calendar', 'Picker'],
		hidden(props) {
			return props.mode !== 'prefs'
		},
	},
	type: {
		title: 'Type',
		type: ControlType.Enum,
		displaySegmentedControl: true,
		options: Object.keys(types),
		optionTitles: Object.keys(types).map(_ => types[_].title),
		hidden(props) {
			return props.mode !== 'prefs'
		},
	},
	locale: {
		title: 'Locale',
		type: ControlType.Enum,
		displaySegmentedControl: true,
		options: ['en', 'fa'],
		optionTitles: ['English', 'Farsi'],
		hidden(props) {
			return props.mode !== 'prefs'
		},
	},
	startWeek: {
		title: 'Week Start',
		type: ControlType.Enum,
		displaySegmentedControl: true,
		options: [6, 0],
		optionTitles: ['Monday', 'Sunday'],
		hidden(props) {
			return props.mode !== 'prefs' || props.locale === 'fa'
		},
	},
	minimumDate: {
		title: 'Sel. Min',
		type: ControlType.String,
		hidden(props) {
			return props.mode !== 'prefs'
		},
	},
	maximumDate: {
		title: 'Sel. Max',
		type: ControlType.String,
		hidden(props) {
			return props.mode !== 'prefs'
		},
	},
	selectedDay: {
		title: 'Selected',
		type: ControlType.String,
		hidden(props) {
			return props.mode !== 'prefs' || props.type !== 'single'
		},
	},
	selectedDayFrom: {
		title: 'Sel. From',
		type: ControlType.String,
		hidden(props) {
			return props.mode !== 'prefs' || props.type !== 'range'
		},
	},
	selectedDayTo: {
		title: 'Sel. To',
		type: ControlType.String,
		hidden(props) {
			return props.mode !== 'prefs' || props.type !== 'range'
		},
	},
	selectedDays: {
		title: 'Selected',
		type: ControlType.Array,
		propertyControl: {
			type: ControlType.String,
		},
		hidden(props) {
			return props.mode !== 'prefs' || props.type !== 'multi'
		},
	},
	disabledDays: {
		title: 'Disabled Days',
		type: ControlType.Array,
		propertyControl: {
			type: ControlType.String,
		},
		hidden(props) {
			return props.mode !== 'prefs'
		},
	},

	// STYLE ====

	weekdayLetters: {
		title: 'W/k Format',
		type: ControlType.Enum,
		displaySegmentedControl: true,
		options: ['M', 'Mo', 'MO'],
		optionTitles: ['M', 'Mo', 'MO'],
		hidden(props) {
			return props.mode !== 'style' || props.locale === 'fa'
		},
	},
	backgroundColor: {
		title: 'Background',
		type: ControlType.Color,
		hidden(props) {
			return props.mode !== 'style'
		},
	},
	textColor: {
		title: 'Text',
		type: ControlType.Color,
		hidden(props) {
			return props.mode !== 'style'
		},
	},
	shouldHighlightWeekends: {
		title: 'Weekends',
		type: ControlType.Boolean,
		disabledTitle: 'Ignore',
		enabledTitle: 'Highlight',
		hidden(props) {
			return props.mode !== 'style'
		},
	},
	weekendColor: {
		title: 'Weekends',
		type: ControlType.Color,
		hidden(props) {
			return props.mode !== 'style' || !props.shouldHighlightWeekends
		},
	},
	selectionFill: {
		title: 'Sel. Style',
		type: ControlType.Boolean,
		enabledTitle: 'Fill',
		disabledTitle: 'Outline',
		hidden(props) {
			return props.mode !== 'style'
		},
	},
	selectionColor: {
		title: 'Selection',
		type: ControlType.Color,
		hidden(props) {
			return props.mode !== 'style'
		},
	},
	selectionTextColorMode: {
		title: 'Sel. Text',
		type: ControlType.Boolean,
		enabledTitle: 'Auto',
		disabledTitle: 'Custom',
		hidden(props) {
			return props.mode !== 'style'
		},
	},
	selectionTextColor: {
		title: 'Sel. Text',
		type: ControlType.Color,
		hidden(props) {
			return props.mode !== 'style' || props.selectionTextColorMode
		},
	},
	rangeColor: {
		title: 'Between',
		type: ControlType.Color,
		hidden(props) {
			return (
				props.mode !== 'style' ||
				props.type !== 'range' ||
				!props.selectionFill
			)
		},
	},
	selectedRadius: {
		type: ControlType.Number,
		title: 'Sel. Radius',
		min: 0,
		max: 2,
		step: 0.1,
		unit: 'em',
		hidden(props) {
			return props.mode !== 'style'
		},
	},
	fontFamily: {
		title: 'Font',
		type: ControlType.String,
		hidden(props) {
			return props.mode !== 'style'
		},
	},
	fontSize: {
		title: 'Size',
		type: ControlType.Number,
		min: 8,
		max: 24,
		step: 1,
		unit: 'px',
		hidden(props) {
			return props.mode !== 'style'
		},
	},
	// padding: {
	// 	title: 'Padding',
	// 	type: ControlType.FusedNumber,
	// 	toggleKey: 'paddingIsMixed',
	// 	toggleTitles: ['All', 'Individual'],
	// 	valueKeys: [
	// 		'paddingTop',
	// 		'paddingRight',
	// 		'paddingBottom',
	// 		'paddingLeft',
	// 	],
	// 	valueLabels: ['T', 'R', 'B', 'L'],
	// 	min: 0,
	// },
	radius: {
		type: ControlType.FusedNumber,
		title: 'Radius',
		toggleKey: 'radiusIsMixed',
		toggleTitles: ['All', 'Individual'],
		valueKeys: [
			'radiusTopLeft',
			'radiusTopRight',
			'radiusBottomRight',
			'radiusBottomLeft',
		],
		valueLabels: ['TL', 'TR', 'BR', 'BL'],
		min: 0,
		hidden(props) {
			return props.mode !== 'style'
		},
	},
	boxShadow: {
		title: 'Shadow',
		type: ControlType.Enum,
		displaySegmentedControl: false,
		options: [
			'0 1em 4em $',
			'0 .125em .25em -.125em $, 0 .5em .75em -.125em $, 0 2em 2em -.25em $',
			'0 0 0 2px $',
			'custom',
		],
		optionTitles: ['Default', 'Paper', 'Outline', 'Custom'],
		hidden(props) {
			return props.mode !== 'style'
		},
	},
	shadowColor: {
		title: 'Sh. Color',
		type: ControlType.Color,
		hidden(props) {
			return props.mode !== 'style' || props.boxShadow === 'custom'
		},
	},
	boxShadowCustom: {
		type: ControlType.String,
		title: 'Sh. CSS',
		displayTextArea: true,
		hidden(props) {
			return props.mode !== 'style' || props.boxShadow !== 'custom'
		},
	},
})
