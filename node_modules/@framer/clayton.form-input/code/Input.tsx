import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import styled from "styled-components";

// Based upon Benjamin den Boer's Input Component
// https://store.framer.com/package/benjamin/input

interface Props {
    styleSet: string;
    disabledInput: boolean;
    disabledOpacity: number;
    fullHeight: boolean;
    fullWidth: boolean;
    value: string;
    onValueChange: (value: string) => void;
    placeholder: string;
    fontSize: number;
    fontWeight: string;
    customFont: boolean;
    customFontFamily: string;
    textColor: string;
    placeholderColor: string;
    paddingPerFontSize: boolean;
    paddingPerSide: boolean;
    paddingNaturalFactor: number;
    padding: number;
    paddingTop: number;
    paddingRight: number;
    paddingBottom: number;
    paddingLeft: number;
    borderWidth: number;
    borderColor: string;
    borderColorHover: string;
    borderColorFocus: string;
    borderRadius: number;
    useBackground: boolean;
    bgColor: string;
    bgColorHover: string;
    bgColorFocus: string;
    transitionSpeed: number;
    textarea: boolean;
    textareaLineHeight: number;
    textareaRows: number;
    textareaCols: number;
    password: boolean;
    tabIndex: number;
}

interface State {
    value: string;
    valueFromProps: string;
}

export class Input extends React.Component<Partial<Props>, State> {
    static defaultProps = {
        // UI Control Groups
        styleSet: "1",
        // Disabled?
        disabledInput: false,
        disabledOpacity: .6,
        // Size
        width: 240,
        height: 48,
        fullWidth: true,
        fullHeight: true,
        // Text
        fontSize: 16,
        fontWeight: '400',
        customFont: false,
        value: "",
        textColor: "#000",
        placeholder: "Placeholder…",
        placeholderColor: "#999",
        // Padding
        paddingPerFontSize: true,
        paddingPerSide: true,
        paddingNaturalFactor: 1,
        padding: 16,
        paddingTop: 12,
        paddingRight: 16,
        paddingBottom: 12,
        paddingLeft: 16,
        // Border
        borderWidth: 1,
        borderColor: "rgba(0,0,0,0.2)",
        borderRadius: 2,
        borderColorHover: "#09F",
        borderColorFocus: "#06F",
        // Background
        useBackground: true,
        bgColor: "#FFF",
        bgColorHover: "#FFF",
        bgColorFocus: "#FFF",
        // Transition
        transitionSpeed: .2,
        // Variants
        textarea: false,
        textareaLineHeight: 1.5,
        textareaRows: 5,
        textareaCols: 25,
        password: false,
        // Misc
        tabIndex: 0
    };

    static propertyControls: PropertyControls<Props> = {
        disabledInput: {
            type: ControlType.Boolean,
            title: "Disabled",
            enabledTitle: "Yes",
            disabledTitle: "No",
        },
        disabledOpacity: {
            type: ControlType.Number,
            title: ".   opacity",
            min: 0,
            max: 1,
            step: .1,
            hidden: (props) => props.disabledInput == false
        },
        textarea: {
            type: ControlType.Boolean,
            title: "Text Area",
            enabledTitle: "Yes",
            disabledTitle: "No",
            hidden: (props) => props.password == true,
        },
        password: {
            type: ControlType.Boolean,
            title: "Password",
            enabledTitle: "Yes",
            disabledTitle: "No",
            hidden: (props) => props.textarea == true,
        },
        styleSet: {
            type: ControlType.Enum,
            title: "Settings",
            options: ["1", "2"],
            optionTitles: ["** Content **", "** Input **"],
        },
        fontSize: {
            type: ControlType.Number,
            title: ".   size",
            min: 1,
            unit: "px",
            hidden: (props) => props.styleSet !== "1"
        },
        fontWeight: {
            type: ControlType.Enum,
            title: ".   weight",
            options: ["100", "200", "300", "400", "500", "600", "700", "800", "900"],
            // optionTitles: ["Thin", "Extra Light", "Light", "Normal", "Medium", "Semi Bold", "Bold", "Extra Bold", "Heavy"]
            hidden: (props) => props.styleSet !== "1"
        },
        textareaLineHeight: {
            type: ControlType.Number,
            title: ".   leading",
            min: 0,
            max: 10,
            step: .1,
            hidden: (props) => props.styleSet !== "1" || props.textarea == false,
        },
        customFont: {
            type: ControlType.Boolean,
            title: ".   font",
            enabledTitle: "Custom",
            disabledTitle: "System",
            hidden: (props) => props.styleSet !== "1"
        },
        customFontFamily: {
            type: ControlType.String,
            title: ".   fontstack",
            hidden: (props) => props.styleSet !== "1" || props.customFont == false
        },
        value: {
            type: ControlType.String,
            title: "Value",
            hidden: (props) => props.styleSet !== "1"

        },
        textColor: {
            type: ControlType.Color,
            title: ".   color",
            hidden: (props) => props.styleSet !== "1"

        },
        placeholder: {
            type: ControlType.String,
            title: "Default",
            hidden: (props) => props.styleSet !== "1"

        },
        placeholderColor: {
            type: ControlType.Color,
            title: ".   color",
            hidden: (props) => props.styleSet !== "1"

        },
        fullWidth: {
            type: ControlType.Boolean,
            title: "Width",
            enabledTitle: "100%",
            disabledTitle: "Natural",
            hidden: (props) => props.styleSet !== "2"
        },
        textareaCols: {
            type: ControlType.Number,
            title: ".   cols",
            min: 1,
            hidden: (props) => props.styleSet !== "2" || props.textarea == false || props.fullWidth == true
        },
        fullHeight: {
            type: ControlType.Boolean,
            title: "Height",
            enabledTitle: "100%",
            disabledTitle: "Natural",
            hidden: (props) => props.styleSet !== "2"
        },
        textareaRows: {
            type: ControlType.Number,
            title: ".   rows",
            min: 1,
            hidden: (props) => props.styleSet !== "2" || props.textarea == false || props.fullHeight == true
        },
        paddingPerFontSize: {
            type: ControlType.Boolean,
            title: "Padding",
            enabledTitle: 'Font Size',
            disabledTitle: 'Literal',
            hidden: (props) => props.styleSet !== "2" || props.fullWidth == true && props.fullHeight == true
        },
        paddingNaturalFactor: {
            type: ControlType.Number,
            title: ".   factor",
            step: .1,
            unit: "em",
            hidden: (props) => props.styleSet !== "2" || props.paddingPerFontSize == false || props.fullWidth == true && props.fullHeight == true
        },
        padding: {
            type: ControlType.FusedNumber,
            title: ".   offsets",
            toggleKey: "paddingPerSide",
            toggleTitles: ["All Sides", "Per Side"],
            valueKeys: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
            valueLabels: ["T", "R", "B", "L"],
            min: 0,
            hidden: (props) => props.styleSet !== "2" || props.paddingPerFontSize == true || props.fullWidth == true && props.fullHeight == true
        },
        borderWidth: {
            type: ControlType.Number,
            title: "Border",
            min: 0,
            max: 6,
            unit: "px",
            displayStepper: true,
            hidden: (props) => props.styleSet !== "2"
        },
        borderColor: {
            type: ControlType.Color,
            title: ".   default",
            hidden: (props) => props.styleSet !== "2" || props.borderWidth <= 0,
        },
        borderColorHover: {
            type: ControlType.Color,
            title: ".   hover",
            hidden: (props) => props.styleSet !== "2" || props.borderWidth <= 0,
        },
        borderColorFocus: {
            type: ControlType.Color,
            title: ".   focus",
            hidden: (props) => props.styleSet !== "2" || props.borderWidth <= 0,
        },
        borderRadius: {
            type: ControlType.Number,
            title: ".   radius",
            unit: "px",
            min: 0,
            displayStepper: true,
            hidden: (props) => props.styleSet !== "2"
        },
        useBackground: {
            type: ControlType.Boolean,
            title: "Background",
            enabledTitle: "Yes",
            disabledTitle: "No",
            hidden: (props) => props.styleSet !== "2"
        },
        bgColor: {
            type: ControlType.Color,
            title: ".   default",
            hidden: (props) => props.styleSet !== "2" || props.useBackground == false
        },
        bgColorHover: {
            type: ControlType.Color,
            title: ".   hover",
            hidden: (props) => props.styleSet !== "2" || props.useBackground == false
        },
        bgColorFocus: {
            type: ControlType.Color,
            title: ".   focus",
            hidden: (props) => props.styleSet !== "2" || props.useBackground == false
        },
        transitionSpeed: {
            type: ControlType.Number,
            title: "Transition",
            min: 0,
            max: 6,
            step: 0.1,
            unit: "s",
            hidden: (props) => props.styleSet !== "2"
        },
        tabIndex: {
            type: ControlType.Number,
            title: "Tab Index",
            displayStepper: true,
            hidden: (props) => props.styleSet !== "2"
        },
    };

    state = {
        value: Input.defaultProps.value,
        valueFromProps: Input.defaultProps.value
    };

    // Allow setting the Value from within the property panel.
    static getDerivedStateFromProps(props: Props, state: State) {
        if (props.value !== state.valueFromProps) {
            return { value: props.value, valueFromProps: props.value };
        } else {
            return null
        }
    }

    onChange = (event: React.ChangeEvent) => {
        const element = this.props.textarea
            ? (event.nativeEvent.target as HTMLTextAreaElement)
            : (event.nativeEvent.target as HTMLInputElement);

        const value = element.value;

        this.setState({ value });

        if (this.props.onValueChange) {
            this.props.onValueChange(value);
        }
    };

    StyledInput = this.props.textarea
        ? styled.textarea`
            -webkit-appearance: none;
            font-weight: ${this.props.fontWeight};
            line-height: ${this.props.textareaLineHeight};
            margin: 0;
            transition: all ${this.props.transitionSpeed}s;
            ::-webkit-input-placeholder {
                color: ${this.props.placeholderColor} !important;
            }
            &:hover {
                box-shadow: inset 0 0 0 ${this.props.borderWidth}px ${this.props.borderColorHover} !important;
                background-color: ${this.props.useBackground ? this.props.bgColorHover : 'transparent'} !important;
            }
            &:focus {
                box-shadow: inset 0 0 0 ${this.props.borderWidth}px ${this.props.borderColorFocus} !important;
                background-color: ${this.props.useBackground ? this.props.bgColorFocus : 'transparent'} !important;
            }
            &[disabled] {
                pointer-events: none;
                opacity: ${this.props.disabledOpacity};
            }
        `
        : styled.input`
            -webkit-appearance: none;
            font-weight: ${this.props.fontWeight};
            line-height: 1;
            transition: all ${this.props.transitionSpeed}s;
            margin: 0;
            ::-webkit-input-placeholder {
                color: ${this.props.placeholderColor} !important;
            }
            &:hover {
                box-shadow: inset 0 0 0 ${this.props.borderWidth}px ${this.props.borderColorHover} !important;
                background-color: ${this.props.useBackground ? this.props.bgColorHover : 'transparent'} !important;
            }
            &:focus {
                box-shadow: inset 0 0 0 ${this.props.borderWidth}px ${this.props.borderColorFocus} !important;
                background-color: ${this.props.useBackground ? this.props.bgColorFocus : 'transparent'} !important;
            }
            &[disabled] {
                pointer-events: none;
                opacity: ${this.props.disabledOpacity};
            }
        `;

    render() {
        const {
            textarea,
            textareaCols,
            textareaRows,
            fullHeight,
            disabledInput,
            placeholder,
            textColor,
            fontSize,
            borderRadius,
            paddingPerFontSize,
            paddingPerSide,
            paddingNaturalFactor,
            padding,
            paddingTop,
            paddingRight,
            paddingBottom,
            paddingLeft,
            borderColor,
            borderWidth,
            password,
            tabIndex
        } = this.props;

        const { value } = this.state;

        const paddingTopValue =
            textarea ?
                paddingPerFontSize ? `${paddingNaturalFactor}em` : (paddingPerSide ? `${paddingTop}px` : `${padding}px`)
                : fullHeight ? '0' : (paddingPerFontSize ? `${paddingNaturalFactor}em` : (paddingPerSide ? `${paddingTop}px` : `${padding}px`))
        const paddingBottomValue =
            textarea ?
                paddingPerFontSize ? `${paddingNaturalFactor}em` : (paddingPerSide ? `${paddingBottom}px` : `${padding}px`)
                : fullHeight ? '0' : (paddingPerFontSize ? `${paddingNaturalFactor}em` : (paddingPerSide ? `${paddingBottom}px` : `${padding}px`))
        const paddingRightValue =
            paddingPerFontSize ? `${paddingNaturalFactor}em` : (paddingPerSide ? `${paddingRight}px` : `${padding}px`)
        const paddingLeftValue =
            paddingPerFontSize ? `${paddingNaturalFactor}em` : (paddingPerSide ? `${paddingLeft}px` : `${padding}px`)
        const paddingValue = `${paddingTopValue} ${paddingRightValue} ${paddingBottomValue} ${paddingLeftValue}`

        return (
            <this.StyledInput
                onChange={this.onChange}
                value={value}
                placeholder={placeholder}
                disabled={disabledInput ? disabledInput : disabledInput}
                style={{
                    ...style,
                    width: this.props.fullWidth ? "100%" : "auto",
                    height: this.props.fullHeight ? "100%" : "auto",
                    fontSize: fontSize,
                    fontFamily: this.props.customFont ? this.props.customFontFamily : "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
                    color: textColor,
                    padding: paddingValue,
                    borderRadius: borderRadius,
                    backgroundColor: this.props.useBackground ? this.props.bgColor : "transparent",
                    boxShadow: `inset 0 0 0 ${borderWidth}px ${borderColor}`
                }}
                type={password ? "password" : "text"}
                tabIndex={tabIndex}
                rows={textarea ? textareaRows : null}
                cols={textarea ? textareaCols : null}
            />
        );
    }
}

const style: React.CSSProperties = {
    border: "none",
    outline: "none",
    resize: "none",
};
